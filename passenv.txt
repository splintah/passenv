-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Fetches secrets from your password store and adds them to your environment.
--   
--   passenv is a tool and Haskell library for fetching secrets from a
--   password store managed by <tt>pass</tt> and adding them to your
--   environment.
--   
--   See <a>https://github.com/splintah/passenv</a> for more information.
@package passenv
@version 0.0.0


-- | A builder for monoidal values in a monadic context.
--   
--   This module contains the <a>Builder</a> type that is used for building
--   the <a>Env</a>, but also for the underlying <a>Var</a>s. And it can be
--   used for any <a>Monoid</a>al value, and in any <a>Monad</a>ic context
--   (an <a>Applicative</a> context is often enough).
--   
--   <h3><a>IsString</a></h3>
--   
--   This module also exports an <a>IsString</a> instance for
--   <a>Builder</a>s, which is useful when building <a>String</a>s or other
--   types with an <a>IsString</a> instance.
--   
--   For example, if we have a builder
--   
--   <pre>
--   stringBuilder :: <a>Applicative</a> m =&gt; <a>Builder</a> m <a>String</a>
--   </pre>
--   
--   then we can compose it with a <a>String</a> literal:
--   
--   <pre>
--   stringBuilder <a>&lt;&gt;</a> "some string" :: <a>Applicative</a> m =&gt; <a>Builder</a> m <a>String</a>
--   </pre>
--   
--   For this you must enable the <tt>OverloadedStrings</tt> language
--   extension, by adding the following to the top of your file:
--   
--   <pre>
--   </pre>
module Passenv.Builder

-- | A builder for monoidal values in a monadic context.
--   
--   <a>Builder</a>s are <a>Monoid</a>s if <tt>a</tt> is a <a>Monoid</a>
--   and <tt>m</tt> is an <a>Applicative</a>, and can be composed with
--   <tt>(<a>&lt;&gt;</a>)</tt>. <a>Builder</a>s are also <a>Monad</a>s if
--   <tt>m</tt> is a <a>Monad</a>.
data Builder m a

-- | Make a <a>Builder</a> from a monadic action.
mkBuilder :: m a -> Builder m a

-- | Run a <a>Builder</a>, returning the underlying monadic action.
runBuilder :: Builder m a -> m a

-- | <tt>r</tt> contains a password value.
class HasPassword r

-- | A <a>Builder</a> which returns the password value.
password :: (HasPassword r, MonadReader r m) => Builder m String

-- | <tt>r</tt> contains key-value pairs.
class HasKeyValues r

-- | Get the value of the given key, returning <a>Nothing</a> if it is not
--   found.
valueMaybe :: (HasKeyValues r, MonadReader r m) => String -> Builder m (Maybe String)

-- | Get the value of the given key, throwing a <a>KeyValueException</a> if
--   it is not found.
value :: (HasKeyValues r, MonadReader r m, MonadThrow m) => String -> Builder m String

-- | An exception for operations on a value which <a>HasKeyValues</a>.
data KeyValueException

-- | The given key is not present.
KeyNotPresentError :: String -> KeyValueException
instance GHC.Exception.Type.Exception Passenv.Builder.KeyValueException
instance GHC.Base.Monad m => GHC.Base.Monad (Passenv.Builder.Builder m)
instance GHC.Base.Applicative m => GHC.Base.Applicative (Passenv.Builder.Builder m)
instance GHC.Base.Functor m => GHC.Base.Functor (Passenv.Builder.Builder m)
instance (GHC.Base.Applicative m, GHC.Base.Monoid a) => GHC.Base.Monoid (Passenv.Builder.Builder m a)
instance (GHC.Base.Applicative m, GHC.Base.Semigroup a) => GHC.Base.Semigroup (Passenv.Builder.Builder m a)
instance GHC.Read.Read (m a) => GHC.Read.Read (Passenv.Builder.Builder m a)
instance GHC.Show.Show (m a) => GHC.Show.Show (Passenv.Builder.Builder m a)
instance GHC.Show.Show Passenv.Builder.KeyValueException
instance Control.Monad.Trans.Class.MonadTrans Passenv.Builder.Builder
instance Control.Monad.IO.Class.MonadIO m => Control.Monad.IO.Class.MonadIO (Passenv.Builder.Builder m)
instance Control.Monad.Catch.MonadThrow m => Control.Monad.Catch.MonadThrow (Passenv.Builder.Builder m)
instance Control.Monad.Catch.MonadCatch m => Control.Monad.Catch.MonadCatch (Passenv.Builder.Builder m)
instance Control.Monad.Reader.Class.MonadReader r m => Control.Monad.Reader.Class.MonadReader r (Passenv.Builder.Builder m)
instance Control.Monad.State.Class.MonadState s m => Control.Monad.State.Class.MonadState s (Passenv.Builder.Builder m)
instance Control.Monad.Writer.Class.MonadWriter w m => Control.Monad.Writer.Class.MonadWriter w (Passenv.Builder.Builder m)
instance Control.Monad.Error.Class.MonadError e m => Control.Monad.Error.Class.MonadError e (Passenv.Builder.Builder m)
instance (GHC.Base.Applicative m, Data.String.IsString a) => Data.String.IsString (Passenv.Builder.Builder m a)


-- | Environment builders.
--   
--   The <a>env</a> <a>Builder</a> is used to build an environment.
module Passenv.Env

-- | An environment variable. This type is used for both the variable's
--   name and the variable's value.
type Var = String

-- | An environment. This is a list of pairs of <a>Var</a>s.
newtype Env
Env :: [(Var, Var)] -> Env
[getEnv] :: Env -> [(Var, Var)]

-- | Create an <a>Env</a> <a>Builder</a> from a list of pairs of <a>Var</a>
--   <a>Builder</a>s.
env :: Applicative m => [(Builder m Var, Builder m Var)] -> Builder m Env
instance GHC.Base.Monoid Passenv.Env.Env
instance GHC.Base.Semigroup Passenv.Env.Env
instance GHC.Show.Show Passenv.Env.Env
instance GHC.Classes.Eq Passenv.Env.Env


-- | A file format with a password on the first line.
module Passenv.Util

-- | Parses a line with an optional end of line.
line :: (MonadParsec e s m, Stream s, Token s ~ Char) => m (Tokens s)

-- | Returns whether the given <a>Char</a> is an end of line character.
--   
--   <pre>
--   isEol c = c == '\n' || c == '\r'
--   </pre>
isEol :: Char -> Bool


-- | A file format with a password on the first line.
module Passenv.Pass.Password

-- | A <a>PasswordFile</a> is a file that contains a password on the first
--   line. The rest of the contents will not be parsed.
--   
--   This file format can be parsed using the <a>passwordFile</a> parser.
--   
--   <h3>Example</h3>
--   
--   <pre>
--   myverygoodpassword
--   key: value
--   Foo
--   </pre>
--   
--   <pre>
--   # Bar
--   </pre>
--   
--   Parsing this file will return:
--   
--   <pre>
--   PasswordFile
--     { pwFilePassword = "myverygoodpassword"
--     }
--   </pre>
data PasswordFile
PasswordFile :: String -> PasswordFile

-- | The password.
[pwFilePassword] :: PasswordFile -> String

-- | Parse a <a>passwordFile</a>.
passwordFile :: Parser PasswordFile

-- | The type of the parser.
type Parser = Parsec Void String

-- | <tt>r</tt> contains a password value.
class HasPassword r

-- | A <a>Builder</a> which returns the password value.
password :: (HasPassword r, MonadReader r m) => Builder m String
instance GHC.Show.Show Passenv.Pass.Password.PasswordFile
instance Passenv.Builder.HasPassword Passenv.Pass.Password.PasswordFile


-- | A file format with a password and key-value pairs.
module Passenv.Pass.KeyValue

-- | A key-value file is a password file format that contains:
--   
--   <ul>
--   <li>On the first line: a password.</li>
--   <li>On all other lines: key-value pairs in the format <tt>key:
--   value</tt>. The spaces before and after the <tt>:</tt> will be
--   ignored; this means that keys cannot contain spaces, and values cannot
--   start with spaces.</li>
--   </ul>
--   
--   This file format is often used by browser extensions for
--   <tt>pass</tt>.
--   
--   This file format can be parsed using the <a>keyValueFile</a> and
--   <a>keyValueFileWith</a> parsers.
--   
--   The parser also supports comments, starting with whatever character
--   you like. You can configure this character using
--   <a>kvFileOptionsComment</a>. Comments must appear on their own line,
--   so the comment character <i>can</i> appear inside values, as can be
--   seen in the following example.
--   
--   <h3>Example</h3>
--   
--   <pre>
--   myverygoodpassword
--   username: myusername
--   email:user@example.com
--   # A line comment, and an empty line:
--   
--   key         : value
--   test: this is not # a comment
--   </pre>
--   
--   With the default options, parsing this file will return:
--   
--   <pre>
--   KeyValueFile
--     { kvFilePassword = "myverygoodpassword"
--     , kvFileMap = 'Map.fromList'
--       [ ("email","user@example.com")
--       , ("key","value")
--       , ("test", "this is not # a comment")
--       , ("username","myusername")
--       ]
--     }
--   </pre>
data KeyValueFile
KeyValueFile :: String -> Map String String -> KeyValueFile

-- | The password.
[kvFilePassword] :: KeyValueFile -> String

-- | The key-value pairs.
[kvFileMap] :: KeyValueFile -> Map String String

-- | The options for parsing a <a>KeyValueFile</a>.
--   
--   This type has a <a>Default</a> instance, so you can use <a>def</a> as
--   the default options.
data KeyValueFileOptions
KeyValueFileOptions :: Maybe Char -> KeyValueFileOptions

-- | The character that starts comments. If <a>Nothing</a>, comments will
--   not be parsed. If <tt><a>Just</a> c</tt> for some <tt>c ::
--   <a>Char</a></tt>, the character <tt>c</tt> will start comments.
--   
--   See <a>KeyValueFile</a> for more information about comments.
--   
--   <a>Default</a>: <tt><a>Just</a> '#'</tt>.
[kvFileOptionsComment] :: KeyValueFileOptions -> Maybe Char

-- | Parse a <a>KeyValueFile</a> with <a>def</a>ault
--   <a>KeyValueFileOptions</a>.
keyValueFile :: Parser KeyValueFile

-- | Parse a <a>KeyValueFile</a> with the given <a>KeyValueFileOptions</a>.
keyValueFileWith :: KeyValueFileOptions -> Parser KeyValueFile

-- | The type of the parser.
type Parser = Parsec Void String

-- | <tt>r</tt> contains a password value.
class HasPassword r

-- | A <a>Builder</a> which returns the password value.
password :: (HasPassword r, MonadReader r m) => Builder m String

-- | <tt>r</tt> contains key-value pairs.
class HasKeyValues r

-- | Get the value of the given key, returning <a>Nothing</a> if it is not
--   found.
valueMaybe :: (HasKeyValues r, MonadReader r m) => String -> Builder m (Maybe String)
instance GHC.Classes.Eq Passenv.Pass.KeyValue.KeyValueFileOptions
instance GHC.Read.Read Passenv.Pass.KeyValue.KeyValueFileOptions
instance GHC.Show.Show Passenv.Pass.KeyValue.KeyValueFileOptions
instance GHC.Show.Show Passenv.Pass.KeyValue.KeyValueFile
instance Data.Default.Class.Default Passenv.Pass.KeyValue.KeyValueFileOptions
instance Passenv.Builder.HasPassword Passenv.Pass.KeyValue.KeyValueFile
instance Passenv.Builder.HasKeyValues Passenv.Pass.KeyValue.KeyValueFile


-- | Functions for interacting with the password store.
module Passenv.Pass

-- | <a>pass</a> <tt>f</tt> <tt>b</tt>: read a file named <tt>f</tt> from
--   the password store, parse it as a <a>PasswordFile</a>, run the builder
--   <tt>b</tt> that builds values of type <tt>a</tt> in a context with a
--   <a>PasswordFile</a>, and return a <a>Builder</a> for <tt>a</tt>.
pass :: (MonadIO m, MonadThrow m, MonadCatch m) => String -> Builder (ReaderT PasswordFile m) a -> Builder m a

-- | The same as <a>passKVWith</a>, but use the default options.
passKV :: (MonadIO m, MonadThrow m, MonadCatch m) => String -> Builder (ReaderT KeyValueFile m) a -> Builder m a

-- | <a>passKV</a> <tt>opts</tt> <tt>f</tt> <tt>b</tt>: read a file named
--   <tt>f</tt> from the password store, parse it as a <a>KeyValueFile</a>
--   with the options in <tt>opts</tt>, run the builder <tt>b</tt> that
--   builds values of type <tt>a</tt> in a context with a
--   <a>KeyValueFile</a>, and return a <a>Builder</a> for <tt>a</tt>.
passKVWith :: (MonadIO m, MonadThrow m, MonadCatch m) => KeyValueFileOptions -> String -> Builder (ReaderT KeyValueFile m) a -> Builder m a

-- | <a>passWithParser</a> <tt>p</tt> <tt>f</tt> <tt>b</tt>: read a file
--   named <tt>f</tt> from the password store, parse it using <tt>p</tt>
--   which returns a value of type <tt>r</tt>, run the builder <tt>b</tt>
--   that builds values of type <tt>a</tt> in a context with a value of
--   type <tt>r</tt>, and return a <a>Builder</a> for <tt>a</tt>.
passWithParser :: (MonadIO m, MonadThrow m, MonadCatch m, Show e, ShowErrorComponent e, Typeable e) => Parsec e String r -> String -> Builder (ReaderT r m) a -> Builder m a

-- | <a>passContents</a> <tt>name</tt> gets the contents of the file named
--   <tt>name</tt> in the password store.
--   
--   The contents are retrieved by executing the <tt>pass</tt> command with
--   <tt>name</tt> as its argument.
passContents :: String -> IO String

-- | An exception that occurs when interacting with the password store.
data PassException

-- | The <tt>pass</tt> process returned with an error.
PassProcessError :: Int -> String -> PassException

-- | An (unrelated) exception was thrown when interacting with a file in
--   the password store.
PassErrorWithFile :: String -> e -> PassException

-- | <tt>r</tt> contains a password value.
class HasPassword r

-- | A <a>Builder</a> which returns the password value.
password :: (HasPassword r, MonadReader r m) => Builder m String

-- | <tt>r</tt> contains key-value pairs.
class HasKeyValues r

-- | Get the value of the given key, returning <a>Nothing</a> if it is not
--   found.
valueMaybe :: (HasKeyValues r, MonadReader r m) => String -> Builder m (Maybe String)

-- | Get the value of the given key, throwing a <a>KeyValueException</a> if
--   it is not found.
value :: (HasKeyValues r, MonadReader r m, MonadThrow m) => String -> Builder m String
instance GHC.Exception.Type.Exception Passenv.Pass.PassException
instance GHC.Show.Show Passenv.Pass.PassException


-- | passenv is a tool and Haskell library for fetching secrets from a
--   password store managed by <tt>pass</tt> and adding them to your
--   environment.
--   
--   See <a>https://github.com/splintah/passenv</a> for more information.
module Passenv

-- | Run the default passenv function:
--   
--   <ul>
--   <li>Get the process' arguments which describe the command to execute.
--   Throws an <a>ArgumentsError</a> when not enough arguments were
--   supplied.</li>
--   <li>Run the given builder, which builds an <a>Env</a> in the <a>IO</a>
--   monad.</li>
--   <li>Execute the command in the new environment.</li>
--   </ul>
--   
--   This function will never finish, because the passenv process will be
--   replaced by the executed process.
passenv :: PassenvOptions -> Builder IO Env -> IO void

-- | Does the same as <a>passenv</a>, but does not get the arguments of the
--   process, and instead uses the command and arguments that are passed to
--   the function.
passenvWith :: String -> [String] -> PassenvOptions -> Builder IO Env -> IO void

-- | Options for <a>passenv</a>.
--   
--   There is a <a>Default</a> instance for <a>PassenvOptions</a>; you can
--   use <a>def</a> to get the default options.
data PassenvOptions
PassenvOptions :: Bool -> PassenvOptions

-- | Search the current path for the command.
--   
--   See <a>executeFile</a> for more information.
--   
--   <a>Default</a>: <a>True</a>.
[passenvSearchPath] :: PassenvOptions -> Bool

-- | An exception for passenv functions.
data PassenvException

-- | Wrong or not enough arguments were supplied. The <a>String</a>
--   describes the intended usage.
ArgumentsError :: String -> PassenvException

-- | <a>pass</a> <tt>f</tt> <tt>b</tt>: read a file named <tt>f</tt> from
--   the password store, parse it as a <a>PasswordFile</a>, run the builder
--   <tt>b</tt> that builds values of type <tt>a</tt> in a context with a
--   <a>PasswordFile</a>, and return a <a>Builder</a> for <tt>a</tt>.
pass :: (MonadIO m, MonadThrow m, MonadCatch m) => String -> Builder (ReaderT PasswordFile m) a -> Builder m a

-- | The same as <a>passKVWith</a>, but use the default options.
passKV :: (MonadIO m, MonadThrow m, MonadCatch m) => String -> Builder (ReaderT KeyValueFile m) a -> Builder m a

-- | <a>passKV</a> <tt>opts</tt> <tt>f</tt> <tt>b</tt>: read a file named
--   <tt>f</tt> from the password store, parse it as a <a>KeyValueFile</a>
--   with the options in <tt>opts</tt>, run the builder <tt>b</tt> that
--   builds values of type <tt>a</tt> in a context with a
--   <a>KeyValueFile</a>, and return a <a>Builder</a> for <tt>a</tt>.
passKVWith :: (MonadIO m, MonadThrow m, MonadCatch m) => KeyValueFileOptions -> String -> Builder (ReaderT KeyValueFile m) a -> Builder m a

-- | <a>passWithParser</a> <tt>p</tt> <tt>f</tt> <tt>b</tt>: read a file
--   named <tt>f</tt> from the password store, parse it using <tt>p</tt>
--   which returns a value of type <tt>r</tt>, run the builder <tt>b</tt>
--   that builds values of type <tt>a</tt> in a context with a value of
--   type <tt>r</tt>, and return a <a>Builder</a> for <tt>a</tt>.
passWithParser :: (MonadIO m, MonadThrow m, MonadCatch m, Show e, ShowErrorComponent e, Typeable e) => Parsec e String r -> String -> Builder (ReaderT r m) a -> Builder m a

-- | Create an <a>Env</a> <a>Builder</a> from a list of pairs of <a>Var</a>
--   <a>Builder</a>s.
env :: Applicative m => [(Builder m Var, Builder m Var)] -> Builder m Env

-- | <tt>r</tt> contains a password value.
class HasPassword r

-- | A <a>Builder</a> which returns the password value.
password :: (HasPassword r, MonadReader r m) => Builder m String

-- | <tt>r</tt> contains key-value pairs.
class HasKeyValues r

-- | Get the value of the given key, returning <a>Nothing</a> if it is not
--   found.
valueMaybe :: (HasKeyValues r, MonadReader r m) => String -> Builder m (Maybe String)

-- | Get the value of the given key, throwing a <a>KeyValueException</a> if
--   it is not found.
value :: (HasKeyValues r, MonadReader r m, MonadThrow m) => String -> Builder m String

-- | A class for types with a default value.
class Default a

-- | The default value for this type.
def :: Default a => a
instance GHC.Show.Show Passenv.PassenvOptions
instance GHC.Exception.Type.Exception Passenv.PassenvException
instance Data.Default.Class.Default Passenv.PassenvOptions
instance GHC.Show.Show Passenv.PassenvException
